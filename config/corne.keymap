/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define TOP     3

/ {
    combos {
        compatible = "zmk,combos";

        screen_shoot {
            bindings = <&kp LG(LS(S))>;
            key-positions = <37 14>;
        };
    };

    behaviors {
        qq: qq {
            compatible = "zmk,behavior-mod-morph";
            label = "QQ";
            bindings = <&kp Q>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        ww: ww {
            compatible = "zmk,behavior-mod-morph";
            label = "WW";
            bindings = <&kp W>, <&kp AT_SIGN>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        ee: ee {
            compatible = "zmk,behavior-mod-morph";
            label = "EE";
            bindings = <&kp E>, <&kp HASH>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        rr: rr {
            compatible = "zmk,behavior-mod-morph";
            label = "RR";
            bindings = <&kp R>, <&kp DOLLAR>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        tt: tt {
            compatible = "zmk,behavior-mod-morph";
            label = "TT";
            bindings = <&kp T>, <&kp PERCENT>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        yy: yy {
            compatible = "zmk,behavior-mod-morph";
            label = "YY";
            bindings = <&kp Y>, <&kp CARET>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        uu: uu {
            compatible = "zmk,behavior-mod-morph";
            label = "UU";
            bindings = <&kp U>, <&kp AMPERSAND>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        ii: ii {
            compatible = "zmk,behavior-mod-morph";
            label = "II";
            bindings = <&kp I>, <&kp ASTERISK>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        oo: oo {
            compatible = "zmk,behavior-mod-morph";
            label = "OO";
            bindings = <&kp O>, <&kp LEFT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        pp: pp {
            compatible = "zmk,behavior-mod-morph";
            label = "PP";
            bindings = <&kp P>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB           &kp Q  &kp W  &kp E         &kp R         &kp T        &kp Y           &kp U  &kp I      &kp O    &kp P          &kp BACKSLASH
&mo 2             &kp A  &kp S  &kp D         &kp F         &kp G        &kp H           &kp J  &kp K      &kp L    &kp SEMICOLON  &kp SQT
&kp LEFT_CONTROL  &kp Z  &kp X  &kp C         &kp V         &kp B        &kp N           &kp M  &kp COMMA  &kp DOT  &kp FSLH       &kp GRAVE
                                &kp LEFT_GUI  &kp LEFT_ALT  &kp SPACE    &kp LEFT_SHIFT  &mo 1  &kp RALT
            >;
        };

        num+fkeys {
            bindings = <
&kp F1            &kp F2  &kp F3  &kp F4            &kp F5             &kp F6       &kp F7  &kp F8         &kp F9      &kp F10  &kp F11  &kp F12
&kp MINUS         &kp N1  &kp N2  &kp N3            &kp N4             &kp N5       &kp N6  &kp N7         &kp N8      &kp N9   &kp N0   &kp EQUAL
&kp LEFT_CONTROL  &trans  &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans       &trans  &kp BACKSPACE  &kp DELETE  &trans   &trans   &kp PLUS
                                  &kp LEFT_CONTROL  &kp LEFT_ALT       &kp LSHFT    &trans  &trans         &trans
            >;
        };

        capsmod {
            bindings = <
&kp TAB           &trans  &trans             &kp LA(F4)        &to 3         &to 4                &kp PG_UP       &kp HOME          &kp UP_ARROW    &kp END    &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&trans            &trans  &kp C_VOLUME_UP    &kp LC(DELETE)    &kp ESCAPE    &kp LS(DEL)          &kp PAGE_DOWN   &kp LEFT          &kp DOWN_ARROW  &kp RIGHT  &kp ENTER         &trans
&kp LEFT_CONTROL  &trans  &kp C_VOLUME_DOWN  &kp C_PREV        &kp C_NEXT    &kp C_PLAY_PAUSE     &trans          &kp BACKSPACE     &kp DEL         &trans     &trans            &trans
                                             &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LC(BACKSPACE)    &kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp LEFT_ALT
            >;
        };

        numpad {
            bindings = <
&kp MINUS       &kp PLUS      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &to 0            &trans     &trans          &mmv MOVE_UP    &trans           &msc SCRL_UP    &trans
&kp LEFT_SHIFT  &kp N0        &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp BACKSPACE    &trans     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN  &trans
&kp SLASH       &kp ASTERISK  &kp N7        &kp N8        &kp N9        &kp EQUAL        &trans     &mkp MB4        &mkp MB5        &trans           &trans          &trans
                                            &kp ENTER     &kp COMMA     &kp SPACE        &mkp LCLK  &mkp RCLK       &trans
            >;
        };

        yt_controll {
            bindings = <
&trans  &trans             &kp J           &kp K           &kp L      &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp C_VOLUME_UP    &kp MINUS       &kp UP_ARROW    &kp PLUS   &kp F        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp C_VOLUME_DOWN  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &trans       &trans  &trans  &trans  &trans  &trans  &trans
                                           &trans          &to 0      &kp SPACE    &trans  &trans  &trans
            >;
        };
    };
};
